# Copyright (c) 2014-2015 Arduino LLC.  All right reserved.
# Copyright (c) 2016 Sandeep Mistry All right reserved.
# Copyright (c) 2017 Adafruit Industries.  All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

name=OpenThread nRF52 Boards
version=0.14.5

# Compile variables
# -----------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-mcpu={build.mcu} -mthumb -c -g {compiler.warning_flags} {build.float_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -MMD
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.c.elf.flags=-Ofast -Wl,--gc-sections -save-temps
compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-mcpu={build.mcu} -mthumb -c -g {compiler.warning_flags} {build.float_flags} -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -MMD
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2bin.flags=-O binary
compiler.elf2bin.cmd=arm-none-eabi-objcopy
compiler.elf2hex.flags=-O ihex
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.ldflags=-mcpu={build.mcu} -mthumb {build.float_flags} -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align --specs=nano.specs --specs=nosys.specs
compiler.size.cmd=arm-none-eabi-size

# this can be overriden in boards.txt
build.float_flags=-mfloat-abi=hard -mfpu=fpv4-sp-d16 -u _printf_float
build.debug_flags=-DCFG_DEBUG=0

# common compiler for nrf
nordic.path={build.system.path}/ot-rtos/third_party/openthread/repo/third_party/NordicSemiconductor
rtos.path={build.system.path}/ot-rtos/third_party/freertos


build.flags.nrf= -DARDUINO_NRF52_ADAFRUIT -DNRF52_SERIES -DLFS_NAME_MAX=64 -Ofast {build.debug_flags} "-I{build.core.path}/cmsis/include" "-I{nordic.path}" "-I{nordic.path}/nrfx" "-I{nordic.path}/nrfx/hal" "-I{nordic.path}/nrfx/mdk" "-I{nordic.path}/nrfx/soc" "-I{nordic.path}/nrfx/drivers/include" "-I{nordic.path}/nrfx/drivers/src" "-I{nordic.path}/softdevice/{build.sd_name}_nrf52_{build.sd_version}_API/include" "-I{rtos.path}/Source/include" "-I{rtos.path}/config" "-I{rtos.path}/portable/GCC/nrf52" "-I{rtos.path}/portable/CMSIS/nrf52" "-I{build.core.path}/sysview/SEGGER" "-I{build.core.path}/sysview/Config" "-I{build.core.path}/Adafruit_TinyUSB_Core" "-I{build.core.path}/Adafruit_TinyUSB_Core/tinyusb/src"

# usb flags
build.flags.usb= -DUSBCON -DUSE_TINYUSB -DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2bin.extra_flags=
compiler.elf2hex.extra_flags=


# Compile patterns
# ----------------

## Compile c files
recipe.c.o.pattern={intiki.cmd-v} -recipe c.o   {intiki.paths} -source "{source_file}" -target "{object_file}" -- {build.flags.nrf} {arduino.defines} {includes}

## Compile c++ files
recipe.cpp.o.pattern={intiki.cmd-v} -recipe cpp.o {intiki.paths} -source "{source_file}" -target "{object_file}" -- {build.flags.nrf} {arduino.defines} {includes}

## Compile S files
recipe.S.o.pattern={intiki.cmd-v} -recipe S.o {intiki.paths} -source "{source_file}" -target "{object_file}" -- {build.flags.nrf} {ardino.defines} {includes}

## Create archives
recipe.ar.pattern={intiki.cmd-v} -recipe ar    {intiki.paths} -source "{object_file}" -target "{archive_file_path}" -- {compiler.ar.flags} {compiler.ar.extra_flags}

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern={intiki.cmd-v} -recipe ld    {intiki.paths} -target "{build.path}/{build.project_name}.elf" -project_name {build.project_name} -archive_file {archive_file}

# Makefile generate patterns
# --------------------
build.make.command=cmake
build.make.command.windows=C:\msys64\usr\bin\cmake
build.intiki.verbose=-1
build.openthread.env.compiler=
build.openthread.env.compiler.macosx=
build.openthread.env=CONFIG_SITE=/etc/config.site
build.openthread.args.arduino=-DARDUINO_COMPILER_PATH={compiler.path} -DARDUINO_BUILD_PATH={build.path} -DARDUINO_VARIANT_PATH={build.variant.path} -DARDUINO_SYSTEM_PATH={build.system.path} -DARDUINO_PREPROC_SOURCE={source_file} -DARDUINO_PREPROC_TARGET={preprocessed_file_path}
build.openthread.args.board=
build.openthread.args.configs=
build.openthread.args={build.openthread.args.arduino} {build.openthread.args.board} {build.openthread.args.configs}
intiki.cmd={runtime.tools.intiki.path}/intiki
intiki.cmd-v={intiki.cmd} {compiler.warning_flags} -verbose {build.intiki.verbose}
intiki.opts=
intiki.opts.windows=-path.format msys -build.usr.bin.path=C:/msys64/usr/bin
intiki.opts.macosx=-build.usr.bin.path=/usr/local/bin
intiki.paths=-build.system.path "{build.system.path}" -build.variant.path "{build.variant.path}" -build.core.path "{build.core.path}" -build.path "{build.path}" -build.variant {build.variant} -runtime.platform.path {runtime.platform.path} -platform.version {version} {intiki.opts}
make.args=-E env {build.openthread.env} {build.make.command} {build.openthread.args}

arduino.defines=-DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_BSP_VERSION="{version}"

## Preprocessor
preproc.macros.flags=-w -x c++ -E -CC -DF_CPU={build.f_cpu} {arduino.defines} {compiler.cpp.extra_flags} {build.flags.nrf} {includes} -make-args {make.args}
recipe.preproc.macros={intiki.cmd-v} -recipe preproc.macros {intiki.paths} -make.command {build.make.command} -source "{source_file}" -target "{preprocessed_file_path}" -template {build.system.path}/support/CMakeLists.txt.template -makefile {build.path}/preproc/_cmakefile/CMakeLists.txt -- {preproc.macros.flags} -P {build.system.path}/support/build.cmake

recipe.hooks.sketch.prebuild.1.pattern={intiki.cmd-v} -recipe stage -stage sketch {intiki.paths}
recipe.hooks.libraries.prebuild.1.pattern={intiki.cmd-v} -recipe stage -stage libraries {intiki.paths}
recipe.hooks.core.prebuild.1.pattern={intiki.cmd-v} -recipe stage -stage core {intiki.paths}
recipe.hooks.linking.prelink.1.pattern={intiki.cmd-v} -recipe stage -stage link {intiki.paths}
recipe.hooks.objcopy.preobjcopy.1.pattern={intiki.cmd-v} -recipe makefile {intiki.paths} -template {build.system.path}/support/CMakeLists.txt.template -makefile {build.path}/_cmakefile/CMakeLists.txt
recipe.hooks.objcopy.preobjcopy.2.pattern={intiki.cmd-v} -recipe make {intiki.paths} -make.command {build.make.command} -- {make.args} -P {build.system.path}/support/build.cmake

## Create output (bin file)
#recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2bin.cmd}" {compiler.elf2bin.flags} {compiler.elf2bin.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Create dfu package zip file
recipe.objcopy.zip.pattern="{tools.nrfutil.cmd}" dfu genpkg --dev-type 0x0052 --sd-req {build.sd_fwid} --application "{build.path}/{build.project_name}.hex" "{build.path}/{build.project_name}.zip"

## Create uf2 file
#recipe.objcopy.uf2.pattern=python "{runtime.platform.path}/tools/uf2conv/uf2conv.py" -f 0xADA52840 -c -o "{build.path}/{build.project_name}.uf2" "{build.path}/{build.project_name}.hex"

## Save bin
recipe.output.tmp_file_bin={build.project_name}.bin
recipe.output.save_file_bin={build.project_name}.save.bin

## Save hex
recipe.output.tmp_file_hex={build.project_name}.hex
recipe.output.save_file_hexu={build.project_name}.save.hex

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*
recipe.size.regex.data=(\.data|\.bss|\.stack)\s+([0-9]+).*

## Export Compiled Binary
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex

#***************************************************
# adafruit-nrfutil for uploading
# https://github.com/adafruit/Adafruit_nRF52_nrfutil
# pre-built binaries are provided for macos and windows
#***************************************************
tools.nrfutil.cmd=adafruit-nrfutil
tools.nrfutil.cmd.windows={runtime.platform.path}/tools/adafruit-nrfutil/win32/adafruit-nrfutil.exe
tools.nrfutil.cmd.macosx={runtime.platform.path}/tools/adafruit-nrfutil/macos/adafruit-nrfutil

tools.nrfutil.upload.params.verbose=--verbose
tools.nrfutil.upload.params.quiet=
tools.nrfutil.upload.pattern="{cmd}" {upload.verbose} dfu serial -pkg "{build.path}/{build.project_name}.zip" -p {serial.port} -b 115200 --singlebank

tools.nrfjprog.cmd=nrfjprog
tools.nrfjprog.upload.params.verbose=
tools.nrfjprog.upload.params.quiet=
tools.nrfjprog.upload.pattern="{cmd}" -f nrf52 --chiperase --program "{build.path}/{build.project_name}.hex" --reset

#***************************************************
# Burning bootloader with either jlink or nrfutil
#***************************************************

# Bootloader version
tools.bootburn.bootloader.file={runtime.platform.path}/bootloader/{build.variant}/{build.variant}_bootloader-0.2.13_{build.sd_name}_{build.sd_version}

tools.bootburn.bootloader.params.verbose=
tools.bootburn.bootloader.params.quiet=
tools.bootburn.bootloader.pattern={program.burn_pattern}

# erase flash page while programming
tools.bootburn.erase.params.verbose=
tools.bootburn.erase.params.quiet=
tools.bootburn.erase.pattern=
